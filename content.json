{"pages":[{"title":"categories","text":"","link":"/categories/index.html"}],"posts":[{"title":"element el-tree当节点的直接后代节点都取消勾选后,该节点继续保持勾选状态","text":"需求 当勾选一个非叶子节点的时候，其祖先节点和后代节点都要选上，当取消勾选一个非叶子节点的时候，其后代节点一并取消勾选，类似设置了check-strictly为false的表现形式，区别是当一个非叶子节点的直接后代节点都取消勾选后该节点继续保持勾选状态 直接上代码template12345678910111213&lt;el-tabs type=&quot;border-card&quot;&gt; &lt;el-tab-pane label=&quot;菜单权限&quot;&gt; &lt;el-tree :data=&quot;menuGrantList&quot; show-checkbox node-key=&quot;id&quot; ref=&quot;treeMenu&quot; check-strictly :default-checked-keys=&quot;menuTreeObj&quot; :props=&quot;props&quot; @check=&quot;menuGrantListCheck&quot;&gt; &lt;/el-tree&gt; &lt;/el-tab-pane&gt;&lt;/el-tabs&gt; script1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465menuGrantListCheck(a, b) { //a是传递给 data 属性的数组中该节点所对应的对象；b是树目前的选中状态对象 this.handleCheck(a, b, this.$refs.treeMenu, this.menuGrantList);},dataScopeGrantListCheck(a, b) { this.handleCheck(a, b, this.$refs.treeDataScope, this.dataScopeGrantList);},apiScopeGrantListCheck(a, b) { this.handleCheck(a, b, this.$refs.treeApiScope, this.apiScopeGrantList);},handleCheck(a, b, refDom, tree) { let tempArr = []; let checkedKeys = b.checkedKeys.slice(); if(a.hasChildren) { const children = this.myFlat(a.children, Infinity); if(checkedKeys.indexOf(a.id) != -1) { //选中了a tempArr = Array.from(new Set(checkedKeys.concat(children))); } else { //计算差集 let checkedKeysSet = new Set(checkedKeys); let childrenSet = new Set(children); tempArr = [...checkedKeysSet].filter(ele =&gt; !childrenSet.has(ele)); } } else { tempArr = [...checkedKeys]; } //将a的父级也勾选上 let parents = a.parentId != &quot;0&quot; &amp;&amp; !tempArr.includes(a.parentId) ? this.findP(a, tree) : &quot;&quot;; tempArr = Array.from(new Set(tempArr.concat(parents)));//去下重 refDom.setCheckedKeys(tempArr);},myFlat(arr, deep) { //获取所有子节点 return deep &gt; 0 ? arr.reduce((acc, val) =&gt; { val.hasChildren ? acc.push(val.id) : &quot;&quot;; return acc.concat(val.hasChildren ? this.myFlat(val.children, deep - 1) : val.id) }, []) : arr.slice();},findP(target, roots) { //查找出所有父节点 let res = [target.parentId]; let t = target.parentId; while(t &amp;&amp; t != 0) { let temp = this.bfc(t, roots); t = temp ? temp.parentId : &quot;0&quot;; t != &quot;0&quot; ? res.push(t) : &quot;&quot;; } return res;},bfc(target, roots) { //广度优先算法 if(!roots || roots.length == 0) { return false; } let childs = []; for(let i = 0; i &lt; roots.length; i++) { if(roots[i].id == target) { return roots[i]; } else { childs = roots[i].hasChildren ? childs.concat(roots[i].children) : childs; } } return this.bfc(target, childs);} 如果有更好的实现方法，欢迎一起探讨","link":"/2022/05/13/element%20el-tree%E5%BD%93%E8%8A%82%E7%82%B9%E7%9A%84%E7%9B%B4%E6%8E%A5%E5%90%8E%E4%BB%A3%E8%8A%82%E7%82%B9%E9%83%BD%E5%8F%96%E6%B6%88%E5%8B%BE%E9%80%89%E5%90%8E,%E8%AF%A5%E8%8A%82%E7%82%B9%E7%BB%A7%E7%BB%AD%E4%BF%9D%E6%8C%81%E5%8B%BE%E9%80%89%E7%8A%B6%E6%80%81/"},{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/2022/05/10/hello-world/"}],"tags":[{"name":"element-ui","slug":"element-ui","link":"/tags/element-ui/"}],"categories":[{"name":"前端","slug":"前端","link":"/categories/%E5%89%8D%E7%AB%AF/"},{"name":"vue","slug":"前端/vue","link":"/categories/%E5%89%8D%E7%AB%AF/vue/"}]}